<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2020/12/12/git-ming-ling-cao-zuo/"/>
      <url>/2020/12/12/git-ming-ling-cao-zuo/</url>
      
        <content type="html"><![CDATA[<hr><p>title: git命令操作<br>top: false<br>cover: false<br>toc: true<br>mathjax: true<br>date: 2020-12-12 16:49:50<br>password:<br>summary:<br>tags: </p><ul><li>git<br>categories:</li><li>git</li></ul><h2 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h2><p>创建一个新的 git 版本库。这个版本库的配置、存储等信息会被保存到.git 文件夹中</p><pre><code># 初始化当前项目$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 在指定目录创建一个空的 Git 仓库。运行这个命令会创建一个名为 directory，只包含 .git 子目录的空目录。$ git init --bare &lt;directory&gt;# 下载一个项目和它的整个代码历史# 这个命令就是将一个版本库拷贝到另一个目录中，同时也将分支都拷贝到新的版本库中。这样就可以在新的版本库中提交到远程分支$ git clone [url]</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>更改设置。可以是版本库的设置，也可以是系统的或全局的</p><pre><code># 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 输出、设置基本的全局变量$ git config --global user.email$ git config --global user.name$ git config --global user.email &quot;MyEmail@gmail.com&quot;$ git config --global user.name &quot;My Name&quot;# 定义当前用户所有提交使用的作者邮箱。$ git config --global alias.&lt;alias-name&gt; &lt;git-command&gt;# 为Git命令创建一个快捷方式（别名）。$ git config --system core.editor &lt;editor&gt;</code></pre><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><p>git 内置了对命令非常详细的解释，可以供我们快速查阅</p><pre><code># 查找可用命令$ git help# 查找所有可用命令$ git help -a# 在文档当中查找特定的命令# git help &lt;命令&gt;$ git help add$ git help commit$ git help init</code></pre><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>显示索引文件（也就是当前工作空间）和当前的头指针指向的提交的不同</p><pre><code># 显示分支，未跟踪文件，更改和其他不同$ git status# 查看其他的git status的用法$ git help status</code></pre><h2 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h2><p>获取某些文件，某些分支，某次提交等 git 信息</p><pre><code># 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@{0 day ago}&quot;# 比较暂存区和版本库差异$ git diff --staged# 比较暂存区和版本库差异$ git diff --cached# 仅仅比较统计信息$ git diff --stat# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog# 查看远程分支$ git br -r# 创建新的分支$ git br &lt;new_branch&gt;# 查看各个分支最后提交信息$ git br -v# 查看已经被合并到当前分支的分支$ git br --merged# 查看尚未被合并到当前分支的分支$ git br --no-merged</code></pre><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><p>添加文件到当前工作空间中。如果你不使用 <code>git add</code> 将文件添加进去，那么这些文件也不会添加到之后的提交之中</p><pre><code># 添加一个文件$ git add test.js# 添加一个子目录中的文件$ git add /path/to/file/test.js# 支持正则表达式$ git add ./*.js# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p</code></pre><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>rm 和上面的 add 命令相反，从工作空间中去掉某个文件</p><pre><code># 移除 HelloWorld.js$ git rm HelloWorld.js# 移除子目录中的文件$ git rm /pather/to/the/file/HelloWorld.js# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]</code></pre><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>管理分支，可以通过下列命令对分支进行增删改查切换等</p><pre><code># 查看所有的分支和远程分支$ git branch -a# 创建一个新的分支$ git branch [branch-name]# 重命名分支# git branch -m &lt;旧名称&gt; &lt;新名称&gt;$ git branch -m [branch-name] [new-branch-name]# 编辑分支的介绍$ git branch [branch-name] --edit-description# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]# 切换到某个分支$ git co &lt;branch&gt;# 创建新的分支，并且切换过去$ git co -b &lt;new_branch&gt;# 基于branch创建新的new_branch$ git co -b &lt;new_branch&gt; &lt;branch&gt;# 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除$ git co $id# 把某次历史提交记录checkout出来，创建成一个分支$ git co $id -b &lt;new_branch&gt;# 删除某个分支$ git br -d &lt;branch&gt;# 强制删除某个分支 (未被合并的分支被删除的时候需要强制)$ git br -D &lt;branch&gt;</code></pre><h2 id="检出"><a href="#检出" class="headerlink" title="检出"></a>检出</h2><p>将当前工作空间更新到索引所标识的或者某一特定的工作空间</p><pre><code># 检出一个版本库，默认将更新到master分支$ git checkout# 检出到一个特定的分支$ git checkout branchName# 新建一个分支，并且切换过去，相当于&quot;git branch &lt;名字&gt;; git checkout &lt;名字&gt;&quot;$ git checkout -b newBranch</code></pre><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><p>远程同步的远端分支</p><pre><code># 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 查看远程服务器地址和仓库名称$ git remote -v# 添加远程仓库地址$ git remote add origin git@ github:xxx/xxx.git# 设置远程仓库地址(用于修改远程仓库地址)$ git remote set-url origin git@ github.com:xxx/xxx.git# 删除远程仓库$ git remote rm &lt;repository&gt;# 上传本地指定分支到远程仓库# 把本地的分支更新到远端origin的master分支上# git push &lt;远端&gt; &lt;分支&gt;# git push 相当于 git push origin master$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all</code></pre><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><pre><code># 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 恢复最后一次提交的状态$ git revert HEAD# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop# 列所有stash$ git stash list# 恢复暂存的内容$ git stash apply# 删除暂存区$ git stash drop</code></pre><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><p>将当前索引的更改保存为一个新的提交，这个提交包括用户做出的更改与信息</p><pre><code># 提交暂存区到仓库区附带提交信息$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...</code></pre><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><p>显示当前工作空间和提交的不同</p><pre><code># 显示工作目录和索引的不同$ git diff# 显示索引和最近一次提交的不同$ git diff --cached# 显示工作目录和最近一次提交的不同$ git diff HEAD</code></pre><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>可以在版本库中快速查找</p><p>可选配置：</p><pre><code># 感谢Travis Jeffery提供的以下用法：# 在搜索结果中显示行号$ git config --global grep.lineNumber true# 是搜索结果可读性更好$ git config --global alias.g &quot;grep --break --heading --line-number&quot;# 在所有的java中查找variableName$ git grep &#39;variableName&#39; -- &#39;*.java&#39;# 搜索包含 &quot;arrayListName&quot; 和, &quot;add&quot; 或 &quot;remove&quot; 的所有行$ git grep -e &#39;arrayListName&#39; --and \( -e add -e remove \)</code></pre><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p>显示这个版本库的所有提交</p><pre><code># 显示所有提交$ git log# 显示某几条提交信息$ git log -n 10# 仅显示合并提交$ git log --merges# 查看该文件每次提交记录$ git log &lt;file&gt;# 查看每次详细修改内容的diff$ git log -p &lt;file&gt;# 查看最近两次详细修改内容的diff$ git log -p -2#查看提交统计信息$ git log --stat</code></pre><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><p>合并就是将外部的提交合并到自己的分支中</p><pre><code># 将其他分支合并到当前分支$ git merge branchName# 在合并时创建一个新的合并后的提交# 不要 Fast-Foward 合并，这样可以生成 merge 提交$ git merge --no-ff branchName</code></pre><h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p>重命名或移动一个文件</p><pre><code># 重命名$ git mv test.js test2.js# 移动$ git mv test.js ./new/path/test.js# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]# 强制重命名或移动# 这个文件已经存在，将要覆盖掉$ git mv -f myFile existingFile</code></pre><h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><pre><code># 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]</code></pre><h2 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h2><p>从远端版本库合并到当前分支</p><pre><code># 从远端origin的master分支更新版本库# git pull &lt;远端&gt; &lt;分支&gt;$ git pull origin master# 抓取远程仓库所有分支更新并合并到本地，不要快进合并$ git pull --no-ff</code></pre><h2 id="ci"><a href="#ci" class="headerlink" title="ci"></a>ci</h2><pre><code>$ git ci &lt;file&gt;$ git ci .# 将git add, git rm和git ci等操作都合并在一起做$ git ci -a$ git ci -am &quot;some comments&quot;# 修改最后一次提交记录$ git ci --amend</code></pre><h2 id="rebase-谨慎使用"><a href="#rebase-谨慎使用" class="headerlink" title="rebase (谨慎使用)"></a>rebase (谨慎使用)</h2><p>将一个分支上所有的提交历史都应用到另一个分支上<em>不要在一个已经公开的远端分支上使用 rebase</em>.</p><pre><code># 将experimentBranch应用到master上面# git rebase &lt;basebranch&gt; &lt;topicbranch&gt;$ git rebase master experimentBranch</code></pre><h2 id="reset-谨慎使用"><a href="#reset-谨慎使用" class="headerlink" title="reset (谨慎使用)"></a>reset (谨慎使用)</h2><p>将当前的头指针复位到一个特定的状态。这样可以使你撤销 merge、pull、commits、add 等 这是个很强大的命令，但是在使用时一定要清楚其所产生的后果</p><pre><code># 使 staging 区域恢复到上次提交时的状态，不改变现在的工作目录$ git reset# 使 staging 区域恢复到上次提交时的状态，覆盖现在的工作目录$ git reset --hard# 将当前分支恢复到某次提交，不改变现在的工作目录# 在工作目录中所有的改变仍然存在$ git reset dha78as# 将当前分支恢复到某次提交，覆盖现在的工作目录# 并且删除所有未提交的改变和指定提交之后的所有提交$ git reset --hard dha78as</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre><code># 生成一个可供发布的压缩包$ git archive# 打补丁$ git apply ../sync.patch# 测试补丁能否成功$ git apply --check ../sync.patch# 查看Git的版本$ git --version</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web缓存</title>
      <link href="/2020/08/23/web-huan-cun/"/>
      <url>/2020/08/23/web-huan-cun/</url>
      
        <content type="html"><![CDATA[<h1 id="web存储机制"><a href="#web存储机制" class="headerlink" title="web存储机制"></a>web存储机制</h1><h3 id="storage类型介绍"><a href="#storage类型介绍" class="headerlink" title="storage类型介绍"></a>storage类型介绍</h3><p>storage类型是来存储名值对儿，是保存在浏览器端的，存储为key-value形式的。</p><ol><li><p>key:作为存储数据的标识（唯一且不可重复） </p></li><li><p>value：存储数据的内容（number/string）</p></li></ol><p>该类型的实例对象有关于存储的方法如下：</p><p> <strong>（1）</strong> clear()：删除所有值。</p><p> <strong>（2）</strong> getItem():根据指定的名字（key）获取对应的值。</p><p> <strong>（3）</strong>  key(index):获取index位置处的值的名字（key）。</p><p> <strong>（4）</strong>  removeItem():删除由name指定的名值对儿。</p><p> <strong>（5）</strong> setItem(name,value): 为指定的name 设置一个对应的值。</p><p> <strong>（6）</strong>  Storage.length ：返回一个整数，表示存储在 Storage 对象中的数据项数量。这个是 Storage 对象的一个属性，而且是一个 只读 属性</p><h4 id="storage特性"><a href="#storage特性" class="headerlink" title="storage特性"></a>storage特性</h4><p> 该类型只能存储字符串,非字符串的数据会在存储之前转换成字符串。</p><h3 id="sessionStorage对象"><a href="#sessionStorage对象" class="headerlink" title="sessionStorage对象"></a>sessionStorage对象</h3><p> sessionStorage对象存储是<strong>web stroage</strong>机制的一种，该对象会给每一个给定的源维持一个独立的存储区域，该区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）<br> sessionStorage对象是绑定在服务器会话的，所以当文件在本地运行的时候是不能跨页面访问的，使用服务器地址访问时才能多页面访问。</p><p><img src="1.png" alt><strong>在另一个页面打开是找不到这个值的：</strong></p><p><img src="2.png" alt><br><strong>开启服务器访问：</strong></p><p><img src="3.png" alt></p><p><strong>再次使用服务器地址访问的时候：</strong></p><p><img src="4.png" alt></p><h3 id="localStorage对象"><a href="#localStorage对象" class="headerlink" title="localStorage对象"></a>localStorage对象</h3><p><strong>localStorage</strong>也是web Stroage存储机制的一种，<strong>localStorage</strong>对象是根据<strong>glocalStorage</strong>对象设计出来的简化，glocalStorage的使用是要指定哪些域名可以访问该数据，是通过方括号标记使用该属性来实现的：</p><pre><code>//存数据glocalStorage[&quot;baidu.com&quot;].name=&quot;刘德华&quot;//取数据var name=glocalStorage[&quot;baidu.com&quot;].name</code></pre><p>听网上说是为了安全性然后在HTML5的规范中用localStorage取代了glocalStorage不能自己设置域名，值使用localStorage对象时就将当前域名加入。规则设计出来就是方便我们的使用的，显然localStorage比之前的使用起来更简单了。</p><p>我自己的理解根据该用户不删除数据，数据将会一直保存在磁盘里的属性，可以设置收藏列表，用户爱好等等。</p><pre><code>//存数据glocalStorage.setItem(&#39;content&#39;, &#39;刘德华&#39;);//取数据glocalStorage.getItem(&#39;content&#39;);</code></pre><h3 id="两者的比较"><a href="#两者的比较" class="headerlink" title="两者的比较"></a>两者的比较</h3><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><h5 id="数据存储时长"><a href="#数据存储时长" class="headerlink" title="数据存储时长"></a>数据存储时长</h5><p>sessionStorage:数据只保持在浏览器关闭</p><p>localStorage：用户不删除数据，数据将会一直保存在磁盘里</p><h5 id="访问规则不同"><a href="#访问规则不同" class="headerlink" title="访问规则不同"></a>访问规则不同</h5><p> localStorage：只要在相同的协议、相同的主机名、相同的端口下，就能读取和修改到同一份 localStorage 存储的数据。</p><p> sessionStorage：除了协议、主机名、端口外，还要求在同一窗口下。</p><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><ol><li>存储大小都不能超过5M。</li></ol><h2 id="Http缓存-协商缓存"><a href="#Http缓存-协商缓存" class="headerlink" title="Http缓存(协商缓存)"></a>Http缓存(协商缓存)</h2><h3 id="Last-Modified与if-Modified-Since"><a href="#Last-Modified与if-Modified-Since" class="headerlink" title="Last-Modified与if-Modified-Since"></a>Last-Modified与if-Modified-Since</h3><p><strong>Last-Modified</strong>：响应头，资源最新修改时间，由服务器告诉浏览器。<br><strong>if-Modified-Since</strong>：请求头，资源最新修改时间，由浏览器告诉服务器(其实就是上次服务器给的Last-Modified，请求又还给服务器对比)，和Last-Modified是一对，它两会在服务器端进行对比。</p><h4 id="请求过程"><a href="#请求过程" class="headerlink" title="请求过程"></a>请求过程</h4><p><strong>第一次请求数据</strong></p><p><strong>浏览器</strong>：服务器服务器，我现在需要一个users.json的文件，你找到了给我，顺便给我文件修改时间！</p><p><strong>服务器</strong>：行，文件修改时间我给你，到时候文件过期了咱两核对文件修改时间，对得上我就不找了，返回a.txt+Last-Modified。</p><p><strong>第二次请求数据</strong><br><strong>浏览器</strong>：服务器服务器，我还需要一个users.json的文件，我把这个文件上次修改时间发你if-Modified-Since，你对比一下文件最近有不有修改！</p><p><strong>服务器</strong>：ok，我帮你找一下。服务器将if-Modified-Since与Last-Modified做了个对比。</p><p>if-Modified-Since 与Last-Modified不相等，服务器查找了最新的users.json，同时再次返回全新的Last-Modified。</p><p>if-Modified-Since 与Last-Modified相等，服务器返回状态码304，文件没修改过，你还是用你的本地缓存。</p><h3 id="Etag与If-None-Match（协商缓存）"><a href="#Etag与If-None-Match（协商缓存）" class="headerlink" title="Etag与If-None-Match（协商缓存）"></a>Etag与If-None-Match（协商缓存）</h3><h4 id="请求过程-1"><a href="#请求过程-1" class="headerlink" title="请求过程"></a>请求过程</h4><p><strong>Etag</strong>：响应头，由服务器设置告诉浏览器。</p><p><strong>if-None-Match</strong>：请求头，由浏览器告诉服务器(其实就是上次服务器给的Etag)，和Etag是一对，它两也会在服务器端进行对比。</p><p><strong>浏览器</strong>：服务器服务器，我现在需要一个users.json的文件，你找到了给我！</p><p><strong>服务器</strong>：你又来了，文件我找给你，我给你一个Etag(文件版本号)，到时候你再来找这个资源的时候把这个带上，省的我再找给你，返回a.txt+Etag。</p><p><strong>第二次请求数据</strong><br><strong>浏览器</strong>：服务器服务器，我又需要users.json文件了，我把你发给我的Etag放在If-None-Match里面了，你对比一下最近这个文件有不有修改！</p><p><strong>服务器</strong>：ok，我帮你找一下。服务器将Etag与If-None-Match做了个对比。<br>Etag与If-None-Match不相等，服务器查找了最新的users.json，同时再次返回全新的Etag(文件版本号)。</p><p>Etag与If-None-Match相等，服务器返回状态码304，文件没修改过，你还是用你的本地缓存。</p><h3 id="Cache-Control（强缓存）"><a href="#Cache-Control（强缓存）" class="headerlink" title="Cache-Control（强缓存）"></a>Cache-Control（强缓存）</h3><p><code>**Cache-Control**</code> 通用消息头字段，被用于在http请求和响应中，通过指定指令来实现缓存机制。缓存指令是单向的，这意味着在请求中设置的指令，不一定被包含在响应中。</p><p><strong>使用方法：</strong><code>res.setHeader(&#39;Cache-Control&#39;, &#39;max-age=20&#39;)</code></p><p><strong>解释：</strong>浏览器访问起止20s（<strong>请求不会到达服务端</strong>）不会执行服务端。会将内容保存在缓存中，从内存/磁盘缓存中提取数据。</p><h3 id="Http头部缓存和web缓存例子"><a href="#Http头部缓存和web缓存例子" class="headerlink" title="Http头部缓存和web缓存例子"></a>Http头部缓存和web缓存例子</h3><h4 id="模拟前端请求显示数据"><a href="#模拟前端请求显示数据" class="headerlink" title="模拟前端请求显示数据"></a>模拟前端请求显示数据</h4><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> users <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'usersdata'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span>            <span class="token keyword">const</span> uluser <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#users'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">)</span> <span class="token punctuation">{</span>                uluser<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span>                        <span class="token template-string"><span class="token string">`                    &lt;li>                        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>place<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">                    &lt;/li>                    `</span></span>                    <span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/users'</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> data<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'usersdata'</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//需要存储字符串</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"users请求"</span><span class="token punctuation">)</span>                    uluser<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span>                        <span class="token template-string"><span class="token string">`                        &lt;li>                            </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>place<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">                        &lt;/li>                        `</span></span>                    <span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模拟服务器接收与发送"><a href="#模拟服务器接收与发送" class="headerlink" title="模拟服务器接收与发送"></a>模拟服务器接收与发送</h4><pre class="line-numbers language-javaScript"><code class="language-javaScript">const http = require('http');const fs = require('fs');const users = require('./users.json')http.createServer((req, res) => {    let status = fs.statSync('users.json');//获取文件的状态    if (req.url == '/') {        res.writeHead(200, { "Content-Type": "text/html;charset=utf8" })         fs.createReadStream('./users.html')pipe(res);//通过流返回显示页面    } else if (req.url == '/users') {        console.log("用户数据请求")        if (req.headers['if-modified-since']) {            if (req.headers['if-modified-since'] == status.mtime) {//判断请求中的修改时间与文件的修改时间是否相同                console.log("未修改文件返回304")                res.writeHead(304, { "Content-Type": "text/html;charset=utf8" });//304 Not Modified                res.end();                return;            } else {                res.setHeader('Last-Modified', status.mtime);                res.writeHead(200, { "Content-Type": "text/html;charset=utf8" });                console.log('修改了返回修改数据')                res.end(JSON.stringify(users))                return;            }        }        console.log("用户数据第一次")        res.setHeader('Last-Modified', status.mtime);        res.writeHead(200, { "Content-Type": "text/html;charset=utf8" });        res.end(JSON.stringify(users))    } else {        res.end("null")    }}).listen('8088', () => {    console.log('监听8088')})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h4><p>第一次请求数据服务器给我们返回200状态码和Last-Modified，代码中提示的地方提示出用户为第一次数据请求。<br><img src="5.png" alt></p><p><img src="6.png" alt></p><p>文件未修改，第二次请求数据服务端判断出文件未修改，则返回304状态码<strong>官方解释304:The HTTP 304 Not Modified client redirection response code indicates that there is no need to retransmit the requested resources.</strong></p><p><img src="7.png" alt></p><p><img src="8.png" alt><br>文件修改，再次访问，服务端检测文件修改时间不一样，则重新返回文件内容</p><p><img src="9.png" alt></p><p><img src="10.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> web缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hook学习</title>
      <link href="/2020/08/17/hook-xue-xi/"/>
      <url>/2020/08/17/hook-xue-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h4><p>useState返回状态（返回为useState中的参数） 会存在state</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//整个context 的状态模拟 </span><span class="token keyword">const</span> <span class="token punctuation">[</span> state<span class="token punctuation">,</span> setTheme <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> theme<span class="token punctuation">:</span> <span class="token string">'red'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="优化学习"><a href="#优化学习" class="headerlink" title="优化学习"></a>优化学习</h3><ol><li>hooks 特色</li></ol><h4 id="useState-1"><a href="#useState-1" class="headerlink" title="useState"></a>useState</h4><p>​    useState(参数/函数)</p><p>​    useState((prevstate)=&gt;prevState+10)</p><h5 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h5><p>​    生命周期的替代</p><p>​    - 在return 完执行 &lt;====&gt; 与componentDidMount生命周期一样</p><p>​    根据依赖是state 在状态执行的时候改变依赖，执行 &lt;====&gt; 与</p><h5 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h5><p>​    复杂的state的父传子 传值优化</p><p>​    当需要超过两层组件传值的时候 使用这个来优化 他没有reducer这么复杂，忽略，且比useState使用更简洁。</p><p>​    创建 </p><p>​    1. 创建一个：export const ThemeContext = React.createContext( 参数/<strong>存入的值</strong>/);</p><pre><code>```jsx&lt;ThemeContext.Provider value={themes.dark}&gt;  &lt;Toolbar /&gt;&lt;/ThemeContext.Provider&gt;//使用原始的获取值方法 太复杂 // 导入 ThemeContext  &lt;ThemeContext.Comsumer &gt;    {      user=&gt;{      }    }  &lt;/ThemeContext.Comsumer&gt;```</code></pre><p>​    2. 在Toolbar中使用 const Theme=useContext(ThemeContext) 就能获取这个值</p><h5 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h5><p>​    三个参数 1. reducer 函数 2. 初始值 3. 初始值计算函数</p><p>​    - redux 是企业级的数据状态安全流程及架构</p><p>​      - state 可读的</p><p>​      - state 写操作 disptch action-&gt;reducer -&gt;旧新状态的操作</p><p>​    只是共享 reducer 函数 具体数据不能共享 ，只是useState的替代方案</p><h5 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h5><p>​    使用：返回一个函数做优化</p><p>​    是因为父组件改变了值 会发生重新渲染 导致父组件的js函数也会重新渲染一次，导致子组件也重新渲染。</p><p>   优化场景：</p><p>​    1. 当我们将一个函数作为参数，传递给子组件的时候，使用useCallback对函数进行处理</p><p>​    2. useCallback会根据依赖是否发生改变，判断是否改变返回函数，</p><p>​    然后子组件使用memo(子组件名)变成高阶组件，</p><p>​    3. memo()高阶组件的使用， 会根据props进行浅层比较 该变则会重新渲染</p><h5 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h5><p>​    使用：也会返回一个memozied（记忆的）值</p><p>​    优化：对返回值做优化 返回值可以是（对象，数组，函数）</p><p>​    场景：当我们使用一个常量，传递给子组件的时候，当父组件state值改变整个函数是会发生重新执行的，然后子组件也会重新渲染。<strong><em>\</em>优化：**</strong>将这个常量使用useMemo返回。 </p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux学习笔记</title>
      <link href="/2020/08/05/redux-xue-xi-bi-ji/"/>
      <url>/2020/08/05/redux-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>为什么使用？</p><p>更好的对状态进行追踪和控制，使状态突变变得可预测的。</p></li><li><p>三大原则</p><ol><li>单一数据源</li><li>State是只读的</li><li>使用纯函数来执行修改</li></ol></li></ul><p>（1）Web 应用是一个状态机，视图与状态是一一对应的。</p><p>（2）所有的状态，保存在一个对象里面。</p><p><strong>Store</strong> 就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 Store。</p><p><img src="image-20200608203136496.png" alt="image-20200608203136496"></p><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span>combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//combineReducers：将方法合并成一个集合</span>    <span class="token comment" spellcheck="true">// combineReducers 集合</span><span class="token keyword">const</span> rootReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//返回一个集合</span>        login<span class="token punctuation">:</span> loginReducer<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//loginReducer为function</span>        posts<span class="token punctuation">:</span> postsReducer<span class="token comment" spellcheck="true">//postsReducer为function</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//createStore :创建Store的</span><span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>rootReducer<span class="token punctuation">,</span> window<span class="token punctuation">.</span>STATE_FROM_SERVER<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//window.STATE_FROM_SERVER`就是整个应用的状态初始值。注意，如果提供了这个参数，它会覆盖 Reducer 函数的默认初始值。</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>  rootReducer<span class="token punctuation">,</span>  window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION__ <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION__</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__() 使用谷歌浏览器的ruduce 的管理器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h4><p><strong>createStore</strong>方法还可以接受第二个参数，表示 State 的最初状态。<strong>这通常是服务器给出的。</strong></p><p><code>window.STATE_FROM_SERVER</code>就是整个应用的状态初始值。注意，如果提供了这个参数，它会覆盖 Reducer 函数的默认初始值。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//使用方法</span><span class="token keyword">let</span> store<span class="token operator">=</span><span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token punctuation">[</span>preloadedState<span class="token punctuation">]</span><span class="token punctuation">,</span> enhancer<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ol><li><code>reducer</code> <em>(Function)</em>: 接收两个参数，分别是当前的 state 树和要处理的 <a href="https://www.redux.org.cn/docs/Glossary.html#action" target="_blank" rel="noopener">action</a>，返回新的 <a href="https://www.redux.org.cn/docs/Glossary.html#state" target="_blank" rel="noopener">state 树</a>。</li><li><a href="https://www.redux.org.cn/docs/api/combineReducers.html" target="_blank" rel="noopener"><code>preloadedState</code>] <em>(any)</em>: 初始时的 state。 在同构应用中，你可以决定是否把服务端传来的 state 水合（hydrate）后传给它，或者从之前保存的用户会话中恢复一个传给它。如果你使用 [<code>combineReducers</code></a> 创建 <code>reducer</code>，它必须是一个普通对象，与传入的 keys 保持同样的结构。否则，你可以自由传入任何 <code>reducer</code> 可理解的内容。</li><li><code>enhancer</code> <em>(Function)</em>: Store enhancer 是一个组合 store creator 的高阶函数，返回一个新的强化过的 store creator。这与 middleware 相似，它也允许你通过复合函数改变 store 接口。</li></ol><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>(<a href="https://www.redux.org.cn/docs/api/Store.html" target="_blank" rel="noopener"><em><code>Store</code></em></a>): 保存了应用所有 state 的对象。改变 state 的惟一方法是 <a href="https://www.redux.org.cn/docs/api/Store.html#dispatch" target="_blank" rel="noopener">dispatch</a> action。你也可以 <a href="https://www.redux.org.cn/docs/api/Store.html#subscribe" target="_blank" rel="noopener">subscribe 监听</a> state 的变化，然后更新 UI。</p><h4 id="Store-方法"><a href="#Store-方法" class="headerlink" title="Store 方法"></a>Store 方法</h4><ul><li><a href="https://www.redux.org.cn/docs/api/Store.html#getState" target="_blank" rel="noopener"><code>getState()</code></a></li><li><a href="https://www.redux.org.cn/docs/api/Store.html#dispatch" target="_blank" rel="noopener"><code>dispatch(action)</code></a></li><li><a href="https://www.redux.org.cn/docs/api/Store.html#subscribe" target="_blank" rel="noopener"><code>subscribe(listener)</code></a></li><li><a href="https://www.redux.org.cn/docs/api/Store.html#replaceReducer" target="_blank" rel="noopener"><code>replaceReducer(nextReducer)</code></a></li></ul><h4 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers"></a>combineReducers</h4><p><code>combineReducers()</code>做的就是产生一个整体的 Reducer 函数。该函数根据 State 的 key 去执行相应的子 Reducer，并将返回结果合并成一个大的 State 对象。</p><h4 id="bindActionCreators"><a href="#bindActionCreators" class="headerlink" title="bindActionCreators"></a>bindActionCreators</h4><p><strong>参数：</strong>actionCreators(函数或者对象)</p><p>​            dispatch:一个对仓库可以调度函数。</p><h4 id="getState"><a href="#getState" class="headerlink" title="getState"></a>getState</h4><p>获取<strong>Reducer</strong>返回的状态(state)</p><h4 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h4><pre class="line-numbers language-js"><code class="language-js">store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>loginAction<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>过程：</p><ul><li>首先，用户发出 Action。</li><li>然后，Store 自动调用 <strong>Reducer</strong>，并且传入两个参数：之前传过来的 State（第一次调用则是为null） 和收到的 Action。 <strong>Reducer</strong> 会返回新的 State 。</li><li>其中所有函数都会执行到</li></ul><h4 id="subscribe（订阅）"><a href="#subscribe（订阅）" class="headerlink" title="subscribe（订阅）"></a>subscribe（订阅）</h4><p><strong>该函数如同监听函数</strong></p><p>订阅Store ，store 通知我回调</p><p>Store 一旦有变化，Store 就会调用监听函数（subscribe）。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//这一步有返回值 返回一个函数。 </span><span class="token keyword">const</span> unsubscribe<span class="token operator">=</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这步一般在组件加载完成的时候触发componentDidMount（）</span>     <span class="token comment" spellcheck="true">//这里可以做重新渲染组件</span>   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/**取消订阅*/</span><span class="token comment" spellcheck="true">//取消只需要调用放回值</span>componentWillUnMount<span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这一步一般在组件卸载的时候被触发</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="react-redux-使用规则"><a href="#react-redux-使用规则" class="headerlink" title="react-redux(使用规则)"></a>react-redux(使用规则)</h3><h4 id="react-中手动实现connect"><a href="#react-中手动实现connect" class="headerlink" title="react 中手动实现connect"></a>react 中手动实现connect</h4><h5 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h5><p>useState返回状态（返回为useState中的参数） 会存在state</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//整个context 的状态模拟 </span><span class="token keyword">const</span> <span class="token punctuation">[</span> state<span class="token punctuation">,</span> setTheme <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> theme<span class="token punctuation">:</span> <span class="token string">'red'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在react中使用createContext去获取全局的上下文<strong>const context = createContext()</strong>;</p><p>在上下文中有实现Provider，</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Fragment<span class="token punctuation">,</span> useState<span class="token punctuation">,</span> createContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> Provider<span class="token punctuation">,</span> Consumer <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span><span class="token operator">&lt;</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>      state<span class="token punctuation">,</span>      setTheme      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>           <span class="token operator">&lt;</span>Fragment<span class="token operator">></span>        <span class="token operator">&lt;</span>Header theme<span class="token operator">=</span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>theme<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Footer <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token comment" spellcheck="true">//Provider将数据存在value属性值中 （唯一存储方法）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>存储方法：</strong></p><ul><li>Provider将数据存在value属性值中 （唯一存储方法）</li><li>Consumer在这个组件中取出Provider存的数据，在Provider内部使用Consumer才是合法的，才能提取数据</li></ul><h4 id="react-dedux-封装Consumer-gt-（connect）"><a href="#react-dedux-封装Consumer-gt-（connect）" class="headerlink" title="react-dedux 封装Consumer==&gt;（connect）"></a>react-dedux 封装Consumer==&gt;（connect）</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider<span class="token punctuation">,</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Header组件</span><span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//函数使用形参传递props</span>  <span class="token comment" spellcheck="true">// 类 class 使用这个this.props</span>  <span class="token comment" spellcheck="true">// FC</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      Header      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Login theme={theme}/> */</span>        <span class="token comment" spellcheck="true">// console.log(object);</span>      <span class="token punctuation">}</span>      <span class="token operator">&lt;</span>Login <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">{</span> props<span class="token punctuation">.</span>login <span class="token operator">?</span> <span class="token string">'1'</span> <span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> props<span class="token punctuation">.</span><span class="token function">changeLoginStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        btn      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* Login 还有其他组件  &lt;Avatar theme={theme}> */</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取全局 store 上面的数据，可以 Consumer 来获取</span><span class="token comment" spellcheck="true">// store 里面的全部的数据都是全局，Header 只要 header 相关的数</span><span class="token comment" spellcheck="true">// state = { login: true, posts: [] }</span><span class="token comment" spellcheck="true">// 从 全部的 store 过滤一下 </span><span class="token comment" spellcheck="true">// Consumer 来，让我们 用 connect</span><span class="token comment" spellcheck="true">// 取到</span><span class="token keyword">function</span> <span class="token function">mapState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 把你想要的数据 return 出来 传递到props上</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    login<span class="token punctuation">:</span> state<span class="token punctuation">.</span>login  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// toProps</span><span class="token comment" spellcheck="true">// 修改数据</span><span class="token keyword">function</span> <span class="token function">mapDispatch</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token function">changeLoginStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span>loginAction<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//不在使用Consumer取数据了，react-redux 封装了Consumer向外抛出connect方法取数据</span><span class="token comment" spellcheck="true">// mapState 把需要的数据映射到props上</span><span class="token comment" spellcheck="true">//mapDispatch将需要使用到的方法映射到props上</span><span class="token comment" spellcheck="true">//所有的数据都映射到了Header 的props上</span><span class="token keyword">const</span> ConnectedHeader <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapState<span class="token punctuation">,</span> mapDispatch<span class="token punctuation">)</span><span class="token punctuation">(</span>Header<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Header组件 经过connect函数改造成了 ConnectedHeader组件</span><span class="token comment" spellcheck="true">//使用就ConnectedHeader代替Header使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="react-redux中Provider"><a href="#react-redux中Provider" class="headerlink" title="react-redux中Provider"></a>react-redux中Provider</h4><p>自己不传入context会基于React.createContext()实现</p><h2 id="状态管理器（redux）使用实例"><a href="#状态管理器（redux）使用实例" class="headerlink" title="状态管理器（redux）使用实例"></a>状态管理器（redux）使用实例</h2><h3 id="状态的定义"><a href="#状态的定义" class="headerlink" title="状态的定义"></a>状态的定义</h3><p><img src="image-20200616220038018.png" alt="image-20200616220038018"></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引入 封装好的功能方法</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store/index'</span><span class="token punctuation">;</span>   <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>       <span class="token comment" spellcheck="true">//在Provider中的所有子组件都可以通过Props使用store中的方法</span>       <span class="token comment" spellcheck="true">//并且在Props会继承对状态操作的三个方法</span>       <span class="token comment" spellcheck="true">//getState  ，  dispatch  ，  subscribe </span>       <span class="token comment" spellcheck="true">//可以通过这个些方法操作状态（store）</span>        <span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span>          <span class="token operator">&lt;</span>Header<span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span>Switch<span class="token operator">></span>            <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> exact<span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/detail"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Detail<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;/Header> */</span><span class="token punctuation">}</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件连接store-仓库-connect"><a href="#组件连接store-仓库-connect" class="headerlink" title="组件连接store(仓库)connect"></a>组件连接store(仓库)connect</h2><p><strong>连接仓库一种方法</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">mapStateTopRops</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//返回仓库内容 </span>  <span class="token keyword">return</span> state<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token function">mapDispatchToProps</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>dispatch<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mapStateTopRops"><a href="#mapStateTopRops" class="headerlink" title="mapStateTopRops"></a>mapStateTopRops</h3><p>将仓库中的状态取出，返回给这个App组件，是组件不用导入仓库就能使状态（mapStateTopRops已经导入了仓库并且将状态以参数的形式返回个这个组件（props中））</p><h3 id="mapDispatchToProps"><a href="#mapDispatchToProps" class="headerlink" title="mapDispatchToProps"></a>mapDispatchToProps</h3><p>将对仓库（store）可操作（修改等）的功能（dispatch）返回给这个组件（以props属性值返回）中。</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP学习篇</title>
      <link href="/2020/08/01/http-xue-xi-pian/"/>
      <url>/2020/08/01/http-xue-xi-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP-IP协议族分层"><a href="#TCP-IP协议族分层" class="headerlink" title="TCP/IP协议族分层"></a>TCP/IP协议族分层</h2><p> tcp/ip协议族分为四层：<strong>应用层，传输层，网络层，数据链路层</strong></p><img src="四层.png" alt="2" style="zoom:60%;"><p>计算机与网络设备要相互通信，双方就必须基于相同的方法。比如，如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为协议</p><p>TCP/IP协议族各层的作用如下。</p><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>应用层决定了向用户提供应用服务时通信的活动。TCP/IP协议族内预存了各类通用的应用服务。比如，FTP（File Transfer Protocol，文件传输协议）和DNS（Domain Name System，域名系统）服务就是其中两类。HTTP协议也处于该层。</p><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。在传输层有两个性质不同的协议：<strong>TCP（Transmission Control Protocol，传输控制协议）和UDP（User Data Protocol，用户数据报协议）</strong>。</p><h3 id="网络层（又名网络互连层）"><a href="#网络层（又名网络互连层）" class="headerlink" title="网络层（又名网络互连层）"></a>网络层（又名网络互连层）</h3><p><strong>网络层用来处理在网络上流动的数据包</strong>。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。与对方计算机之间通过多台计算机或网络设备进行传输时，<strong>网络层所起的作用就是在众多的选项内选择一条传输路线。</strong></p><h3 id="链路层（又名数据链路层，网络接口层）"><a href="#链路层（又名数据链路层，网络接口层）" class="headerlink" title="链路层（又名数据链路层，网络接口层）"></a>链路层（又名数据链路层，网络接口层）</h3><p><strong>用来处理连接网络的硬件部分</strong>。包括控制操作系统、硬件的设备驱动、NIC（NetworkInterface Card，网络适配器，即网卡），及光纤等物理可见部分（还包括连接器等一切传输媒介）。<strong>硬件上的范畴均在链路层的作用范围之内</strong>。</p><h2 id="http数据传输的过程客户端-服务端"><a href="#http数据传输的过程客户端-服务端" class="headerlink" title="http数据传输的过程客户端-服务端"></a>http数据传输的过程客户端-服务端</h2><p><img src="http%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B.png" alt="数据封装"></p><p><strong>浏览器输入地址=&gt;在本地DNS服务器上查找域名ip=&gt;返回给浏览器ip的情况=&gt;然后通过TCP/IP（三次握手）连接服务器=&gt;然后数据传输=&gt;四次挥手断开连接</strong></p><p>完成一次http的访问。</p><h3 id="DNS服务（使用DNS协议）"><a href="#DNS服务（使用DNS协议）" class="headerlink" title="DNS服务（使用DNS协议）"></a>DNS服务（使用DNS协议）</h3><p>​        DNS服务应运而生。DNS协议提供通过域名查找IP地址，或逆向从IP地址反查域名的服务。</p><p><img src="image-20200517211619609.png" alt="image-20200517211619609"></p><h3 id="DNS域名解析完之后-数据打包"><a href="#DNS域名解析完之后-数据打包" class="headerlink" title="DNS域名解析完之后-数据打包"></a>DNS域名解析完之后-数据打包</h3><p><img src="%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85.png" alt="数据封装"></p><h3 id="HTTP数据传输过程"><a href="#HTTP数据传输过程" class="headerlink" title="HTTP数据传输过程"></a>HTTP数据传输过程</h3><p> 为了传输方便，在传输层（TCP协议）把从应用层处收到的数据（HTTP请求报文）进行分割，并在各个报文上打上标记序号及端口号后转发给网络层。</p><p><img src="image-20200517191757183.png" alt="image-20200517191757183"></p><p><img src="http%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B.png" alt="http数据传输过程"></p><p><strong>ARP</strong>是一种用以解析地址的协议，根据通信方的IP地址就可以反查出对应的MAC地址。</p><h3 id="网关-代理服务器"><a href="#网关-代理服务器" class="headerlink" title="网关-代理服务器"></a>网关-代理服务器</h3><h4 id="1-网关"><a href="#1-网关" class="headerlink" title="1.网关"></a>1.网关</h4><p>​        <strong>作用：</strong>网关的工作机制和代理十分相似。而网关能使通信线路上的服务器提供非HTTP协议服务。</p><p>​        利用网关能提高通信的安全性，因为可以在客户端与网关之间的通信线路上加密以确保连接的安全。比如，网关可以连接数据库，使用SQL语句查询数据。另外，在Web购物网站上进行信用卡结算时，网关可以和信用卡结算系统联动。</p><p><img src="image-20200517215504244.png" alt="image-20200517215504244"></p><h4 id="2-代理服务器"><a href="#2-代理服务器" class="headerlink" title="2.代理服务器"></a>2.代理服务器</h4><p>​        <strong>作用：</strong>代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。代理不改变请求URI，会直接发送给前方持有资源的目标服务器。</p><p><img src="image-20200517215617647.png" alt="image-20200517215617647"></p><h4 id="3-隧道"><a href="#3-隧道" class="headerlink" title="3.隧道"></a>3.隧道</h4><p>​            <strong>作用：</strong>隧道可按要求建立起一条与其他服务器的通信线路，届时使用SSL等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。隧道本身不会去解析HTTP请求。也就是说，请求保持原样中转给之后的服务器。隧道会在通信双方断开连接时结束。</p><p><img src="image-20200517215911886.png" alt="image-20200517215911886"></p><h2 id="HTTP-1-1-首部字段一览-47个首部–通用，请求，响应，实体）"><a href="#HTTP-1-1-首部字段一览-47个首部–通用，请求，响应，实体）" class="headerlink" title="HTTP/1.1 首部字段一览(47个首部–通用，请求，响应，实体）"></a>HTTP/1.1 首部字段一览(47个首部–通用，请求，响应，实体）</h2><h3 id="通用头部"><a href="#通用头部" class="headerlink" title="通用头部"></a>通用头部</h3><p><img src="image-20200518090100570.png" alt="image-20200518090100570"></p><h3 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h3><p><img src="image-20200518090221053.png" alt="image-20200518090221053"></p><h3 id="响应头部"><a href="#响应头部" class="headerlink" title="响应头部"></a>响应头部</h3><p><img src="image-20200518090240543.png" alt="image-20200518090240543"></p><h3 id="实体头部"><a href="#实体头部" class="headerlink" title="实体头部"></a>实体头部</h3><p><img src="image-20200518090256405.png" alt="image-20200518090256405"></p><h2 id="HTTP缓存机制"><a href="#HTTP缓存机制" class="headerlink" title="HTTP缓存机制"></a>HTTP缓存机制</h2><h3 id="（1）Expires缓存"><a href="#（1）Expires缓存" class="headerlink" title="（1）Expires缓存"></a>（1）Expires缓存</h3><p><img src="image-20200518093115611.png" alt="image-20200518093115611"></p><h3 id="（2）Last-Modified——-if-modified-since缓存"><a href="#（2）Last-Modified——-if-modified-since缓存" class="headerlink" title="（2）Last-Modified——-if-modified-since缓存"></a>（2）Last-Modified——-if-modified-since缓存</h3><p><strong>第一次访问</strong>设置<strong>Last-Modified</strong></p><p>res.setHeader(‘Last-Modified’, status.mtime);设置最后访问时间</p><p><strong>第二次访问</strong>的时候就会在请求头中加入<strong>if-modified-since</strong>该时间为第一次访问时<strong>Last-Modified</strong>的时间</p><p>if (req.headers[‘if-modified-since’] == status.mtime) </p><h4 id="—缺点"><a href="#—缺点" class="headerlink" title="—缺点"></a>—缺点</h4><p>​    <strong>当在同一秒访问的时候，时间将不会改变，则无法检测文件是否改变</strong></p><p><img src="image-20200518093204257.png" alt="image-20200518093204257"></p><h3 id="（3）Etag—if-none-match-版本号-缓存机制"><a href="#（3）Etag—if-none-match-版本号-缓存机制" class="headerlink" title="（3）Etag—if-none-match(版本号)缓存机制"></a>（3）Etag—if-none-match(版本号)缓存机制</h3><p>第一次访问的时候设置版本号，响应头里面存在 <code>Etag：version</code></p><p>再次访问的时候，浏览器将<code>Etag：version</code>加到请求头里面为：<code>if-none-match：version</code></p><pre class="line-numbers language-javascript"><code class="language-javascript"> res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Etag'</span><span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置版本号</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'if-none-match'</span><span class="token punctuation">]</span> <span class="token operator">==</span> version<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断版本号  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="（4-md5-hash缓存"><a href="#（4-md5-hash缓存" class="headerlink" title="（4)md5/hash缓存"></a>（4)md5/hash缓存</h3><p>​    通过不缓存html,为静态文件添加MD5或者hash标识，解决浏览器无法跳过缓存过期时间主动感知文件变化的问题</p><h3 id="5-CDN缓存"><a href="#5-CDN缓存" class="headerlink" title="(5)CDN缓存"></a>(5)CDN缓存</h3><p>​    CDN是构建在网络之上的内容分发网络，依靠部署哎各地的边缘服务器，通过中心平台的负载均衡，内容分发，调度等功能模块，使用户就近获取所需内容，减低网络拥塞，提高用户访问响应速度和命中率。</p><p>​    如同代理一样，设置缓存过期时间，</p><p><img src="image-20200518094603537.png" alt="image-20200518094603537"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩具浏览器（附代码）</title>
      <link href="/2020/05/16/wan-ju-liu-lan-qi/"/>
      <url>/2020/05/16/wan-ju-liu-lan-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="HTML解析"><a href="#HTML解析" class="headerlink" title="HTML解析"></a><strong>HTML解析</strong></h3><h4 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a><strong>解析过程</strong></h4><pre class="line-numbers language-html"><code class="language-html">let htmlStr = `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>`let stack = [{ type: 'document', children: [] }];//这个为栈顶元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>处理标签的三种情况：</strong></p><ul><li><p><strong>遇见”&lt;”开始记录标签，遇见”&gt;”z则记录该标签结束（没有遇见”/“则将该标签设置为开始标签记录在stack栈中）。</strong></p></li><li><p><strong>遇见”&lt;”开始记录标签，当遇见“/” 并且栈中有该标签的开始标签，则将开始标签出栈，将标签记录为结束标签存在栈顶元素中。</strong></p></li><li><p><strong>遇见”&lt;”开始记录标签，当遇见“/” ，栈中没有该标签的开始标签，将标签记录为单标签存在栈顶元素中。</strong></p></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> css <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> layout <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./layout'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//导入画图片的第三方库</span><span class="token keyword">const</span> images <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'images'</span><span class="token punctuation">)</span><span class="token keyword">let</span> htmlStr <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;html>  &lt;head>   &lt;style>   &lt;/style>  &lt;/head>  &lt;body>    &lt;div class="wrap">        &lt;div class="main">&lt;/div>        &lt;div class="aside">&lt;/div>    &lt;/div>  &lt;/body>&lt;/html>`</span></span>    <span class="token comment" spellcheck="true">//css的解析成JSON</span><span class="token keyword">let</span> cssStr <span class="token operator">=</span> <span class="token template-string"><span class="token string">`.wrap {    display: flex;    justify-content: center;    align-items: center;    width: 500px;    height: 500px;    background-color: rgb(255,0,0);}.main {    width: 200px;    height: 200px;    background-color: rgb(0,255,0);}.aside{    width: 300px;    height: 300px;    background-color: rgb(0,0,255);}`</span></span><span class="token keyword">let</span> rules <span class="token operator">=</span> css<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>cssStr<span class="token punctuation">)</span><span class="token punctuation">.</span>stylesheet<span class="token punctuation">.</span>rules<span class="token keyword">let</span> currentToken <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> currentAttribute <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化栈顶元素</span><span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'document'</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开始解析html字符串</span><span class="token function">parse</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//拿到整颗树 </span>    <span class="token comment" spellcheck="true">//遍历树 渲染每个element（节点）</span><span class="token keyword">let</span> tree <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> viewImage <span class="token operator">=</span> <span class="token function">images</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>style<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token function">images</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token punctuation">,</span> element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取颜色</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">'background-color'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> color <span class="token operator">=</span> element<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">'background-color'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> start <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                end <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//获取rgb中的三个数值</span>            <span class="token keyword">let</span> rgb <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token function">parseInt</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            img<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>rgb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rgb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rgb<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        view<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>x<span class="token punctuation">,</span> element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> child <span class="token keyword">of</span> element<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">render</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span>viewImage<span class="token punctuation">,</span> tree<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//定义一个画布</span><span class="token comment" spellcheck="true">//将绘制好的画布保存</span>viewImage<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">'render.jpg'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// function match(selector, ele) {</span><span class="token comment" spellcheck="true">//     if (selector || ele.attributes) {</span><span class="token comment" spellcheck="true">//         return false;</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">//     if (selector.charAt(0) === '#') {</span><span class="token comment" spellcheck="true">//         let idAttr = ele.attributes.find(e => e.name === 'id');</span><span class="token comment" spellcheck="true">//         if (idAttr) {</span><span class="token comment" spellcheck="true">//         }</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">/** *  * @param {String} selector  * @param {JSON} ele  * @function 判断样式的类型，若匹配成功则返回true,匹配不成功则返回false *  */</span><span class="token keyword">function</span> <span class="token function">match</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selector <span class="token operator">||</span> <span class="token operator">!</span>ele<span class="token punctuation">.</span>attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// #myid</span>    <span class="token comment" spellcheck="true">// {name: id, value：‘myid’}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> idAttr <span class="token operator">=</span> ele<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> e<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>idAttr <span class="token operator">&amp;&amp;</span> idAttr<span class="token punctuation">.</span>value <span class="token operator">===</span> selector<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> classAttr <span class="token operator">=</span> ele<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> e<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>classAttr <span class="token operator">&amp;&amp;</span> classAttr<span class="token punctuation">.</span>value <span class="token operator">===</span> selector<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span>tagName <span class="token operator">===</span> selector<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// function computerCss(ele) {}</span><span class="token keyword">function</span> <span class="token function">computerCss</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算 符合这个 ele 的所有 css 规则 || css 规则 应用到这个节点上面</span>    <span class="token comment" spellcheck="true">// 1: 靠 ele 属性 父节点，和 css 里面 选择器 匹配</span>    <span class="token comment" spellcheck="true">// 2：匹配 从后往前匹配  .parent .cls</span>    <span class="token comment" spellcheck="true">// tagName #id  .className</span>    <span class="token comment" spellcheck="true">// .parent .cls</span>    <span class="token comment" spellcheck="true">// div  || div .cls  || span #parentID .parent #id</span>    <span class="token comment" spellcheck="true">//stack.slice(0) 存在子元素和父元素 翻转则先从子元素中查找样式</span>    <span class="token keyword">let</span> elements <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ele<span class="token punctuation">.</span>computerStyle<span class="token punctuation">)</span> ele<span class="token punctuation">.</span>computerStyle <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 所有 css 规则</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> rule <span class="token keyword">of</span> rules<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取类名---selectors: [ '.aside' ],</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">" rule.selectors[0]"</span><span class="token punctuation">,</span> rule<span class="token punctuation">.</span>selectors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//.wrap .main</span>       <span class="token comment" spellcheck="true">//selector [ '.main', '.wrap' ] 将样式名翻转从子样式中开始到父级结束找（从内到外查找样式</span>        <span class="token keyword">let</span> selector <span class="token operator">=</span> rule<span class="token punctuation">.</span>selectors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最后一项匹配上了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">match</span><span class="token punctuation">(</span>selector<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 匹配没有成功跳过本轮循环，往后的步骤</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 看父级满不满足  </span>        <span class="token comment" spellcheck="true">// [{type: 'doc'}, {html}, [header]]</span>        <span class="token comment" spellcheck="true">// [#id .parent  #parentID  span]</span>        <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">match</span><span class="token punctuation">(</span>selector<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> j<span class="token operator">++</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 匹配</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> selector<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// rule rule css 规则添加到 ele</span>            <span class="token comment" spellcheck="true">//当全部匹配成功则将样式添加到element.computerStyle属性中</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> delecare <span class="token keyword">of</span> rule<span class="token punctuation">.</span>declarations<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> <span class="token punctuation">{</span> property<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> delecare<span class="token punctuation">;</span>                ele<span class="token punctuation">.</span>computerStyle<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// function computerCss(ele) {</span><span class="token comment" spellcheck="true">//     // 计算 符合这个 ele 的所有 css 规则，css 规则 应用到这个节点上面</span><span class="token comment" spellcheck="true">//     // 1: 靠 ele 属性 父节点，和 css 里面 选择器 匹配</span><span class="token comment" spellcheck="true">//     // 2：匹配 从后往前匹配  .parent .cls</span><span class="token comment" spellcheck="true">//     let elements = stack.slice(0).reverse();</span><span class="token comment" spellcheck="true">//     for (let rule of rules) {</span><span class="token comment" spellcheck="true">//         let selector = rule.selectors[0].split(' ').reverse();</span><span class="token comment" spellcheck="true">//         if (!match(selector[0], ele)) {</span><span class="token comment" spellcheck="true">//             continue;</span><span class="token comment" spellcheck="true">//         }</span><span class="token comment" spellcheck="true">//         let j = 1;</span><span class="token comment" spellcheck="true">//         for (let i = 0; i &lt; elements.length; i++) {</span><span class="token comment" spellcheck="true">//             if (match(selector[j], elements[i])) {</span><span class="token comment" spellcheck="true">//                 j++;</span><span class="token comment" spellcheck="true">//             }</span><span class="token comment" spellcheck="true">//         }</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// }</span><span class="token keyword">function</span> <span class="token function">emit</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//提交处理好的标签</span>    <span class="token comment" spellcheck="true">// console.log(token);</span>    <span class="token comment" spellcheck="true">//取出栈中的栈顶元素（开始的父级标签）</span>    <span class="token keyword">let</span> top <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'startTag'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//开始标签（标志）</span>        <span class="token comment" spellcheck="true">// push pop 处理配对</span>        <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>            type<span class="token punctuation">:</span> <span class="token string">'element'</span><span class="token punctuation">,</span>            children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            attributes<span class="token punctuation">:</span> token<span class="token punctuation">.</span>attributes<span class="token punctuation">,</span>            tagName<span class="token punctuation">:</span> token<span class="token punctuation">.</span>tagName        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 知道 attributes , 知道 stack 里面元素 是 element 父节点</span>        <span class="token comment" spellcheck="true">//遇到一个开始标签则匹配一下css样式</span>          <span class="token comment" spellcheck="true">/**         * 每一次提交标签 都会将没有添加css样式的元素去找css匹配一下         * element是引用类型 则不要定义全局变量         * 形参修改则实参也会修改：赋予地址给形参         * */</span>        <span class="token function">computerCss</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将加工好的元素添加到栈顶元素中</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//   console.log("stack", JSON.stringify(stack))</span>            <span class="token comment" spellcheck="true">// 作为栈顶的元素子节点，为了生成树</span>            <span class="token comment" spellcheck="true">// if (!top.children) top.children = [];</span>        top<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'endTag'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>tagName <span class="token operator">!==</span> top<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'tagname match error'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//遇到结束标签标签出栈</span>            <span class="token comment" spellcheck="true">// flex 布局 放到结束标签位置</span>            <span class="token comment" spellcheck="true">// 因为像 alignItems justifyContent 需要知道子元素的宽高的</span>            <span class="token comment" spellcheck="true">// 先保证 子元素宽高 已经解析出来了</span>            <span class="token comment" spellcheck="true">// 在这里计算 （x,y）</span>            <span class="token comment" spellcheck="true">// 栈顶元素就是 要布局的 容器</span>            <span class="token comment" spellcheck="true">//将节点的子元素去格式化css样式</span>            <span class="token function">layout</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//匹配开始标签（成功）让开始标签出栈</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'selfCloseToken'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>            type<span class="token punctuation">:</span> <span class="token string">'element'</span><span class="token punctuation">,</span>            children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            attributes<span class="token punctuation">:</span> token<span class="token punctuation">.</span>attributes<span class="token punctuation">,</span>            tagName<span class="token punctuation">:</span> token<span class="token punctuation">.</span>tagName        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将单标签  存在栈顶元素中</span>        top<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    currentToken <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//html 字符串进入</span><span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span>htmlString<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token keyword">of</span> htmlString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state <span class="token operator">=</span> <span class="token function">state</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断字符是否为‘&lt;’ 是则为判断开始标签</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">'&lt;'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> tagOpen    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//不是则重新获取下一个字符</span>        <span class="token comment" spellcheck="true">//判断字符函数</span>        <span class="token keyword">return</span> start    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">tagOpen</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// &lt;html>: html tag 由 a-zA-Z  div span p </span>    <span class="token comment" spellcheck="true">// &lt;/html></span>    <span class="token comment" spellcheck="true">//  h t m l</span>    <span class="token comment" spellcheck="true">// console.log(c);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//&lt;/html>：判断遇见结束标签</span>        <span class="token keyword">return</span> endTagOpen    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-zA-Z]/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//没有遇到则将标签记录下来存在currentToken中</span>        currentToken <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//标记为开始标签</span>            type<span class="token punctuation">:</span> <span class="token string">'startTag'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//开始记录标签中的字符</span>            tagName<span class="token punctuation">:</span> c        <span class="token punctuation">}</span>        <span class="token keyword">return</span> tagName    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//该函数为字符串拼接函数</span><span class="token keyword">function</span> <span class="token function">tagName</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//记录标签的类型和字符</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-zA-Z]/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        currentToken<span class="token punctuation">.</span>tagName <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token keyword">return</span> tagName    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[\t\n\f ]/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//遇见空格的是时候 则判断是否要结束还是样式名</span>        <span class="token keyword">return</span> beforeAttaibuteName    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">'>'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//遇见‘>’结束符号则进行下一次标签判断</span>        <span class="token comment" spellcheck="true">// tag 拼接结束 提交保存好的标签</span>        <span class="token function">emit</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> start    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** *beforeAttaibuteName功能介绍： * 入口：attributeValue，tagName在这两个函数过来 * 功能：1. 遇见‘/’则是单标签--判断是否为单标签  *      2. 遇见空格 则自我消化--消除空格 *      3. 遇见字母则是为样式名--拼接样式名字 *      4. 遇见 '>' 则是结束了该标签的拼接工作交给tagName函数去提交 */</span><span class="token keyword">function</span> <span class="token function">beforeAttaibuteName</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//attributeValue在这个函数过来的要是‘/’则是单标签</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//遇见‘/’则是结束</span>        currentToken<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'selfCloseToken'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tagName<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-zA-Z]/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//遇见字符则是css样式名</span>        currentAttribute <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//开始记录css样式</span>            name<span class="token punctuation">:</span> c<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//样式类型</span>            value<span class="token punctuation">:</span> <span class="token string">''</span> <span class="token comment" spellcheck="true">//样式名字</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> attributeName    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[\t\n\f ]/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//再次遇见空格则自我消化（忽略）  </span>        <span class="token keyword">return</span> beforeAttaibuteName    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">'>'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//遇见结束标签则交给tagName处理</span>        <span class="token keyword">return</span> <span class="token function">tagName</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">attributeName</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// class="cls"</span>    <span class="token comment" spellcheck="true">// ""</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-zA-Z]/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//存储样式名字</span>        currentAttribute<span class="token punctuation">.</span>name <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字符相加</span>        <span class="token keyword">return</span> attributeName<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">'='</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当遇见‘=’ 的时候 则是样式类型（class/id）拼接结束的时候</span>        <span class="token comment" spellcheck="true">//交给attributeValue函数拼接样式名</span>        <span class="token keyword">return</span> attributeValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">attributeValue</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// &lt;div class="cls" id="myid" a="b">&lt;/div></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">'\"'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//遇见左边双引号（右边双引号==左边双引号）的时候 则进行样式名字的存储</span>        <span class="token comment" spellcheck="true">//遇见右边双引号（右边双引号==左边双引号）的时候 则进行存储样式名</span>        <span class="token comment" spellcheck="true">// nothing</span>        <span class="token keyword">return</span> attributeValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-zA-Z]/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//自循环将样式的名字一个一个字符相加存储</span>        currentAttribute<span class="token punctuation">.</span>value <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token keyword">return</span> attributeValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若“”之后是空格 则执行这一步</span>        <span class="token comment" spellcheck="true">// 消耗了</span>        <span class="token comment" spellcheck="true">//若该子节点没有attributes则初始化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentToken<span class="token punctuation">.</span>attributes<span class="token punctuation">)</span> currentToken<span class="token punctuation">.</span>attributes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在JSON中的attributes属性加css的类型很名字</span>        currentToken<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentAttribute<span class="token punctuation">)</span><span class="token punctuation">;</span>        currentAttribute <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 代理</span>        <span class="token comment" spellcheck="true">// 本状态内部处理完毕了这个 c，下一个状态也要针对 c 处理</span>        <span class="token comment" spellcheck="true">// 本状态内部处理完毕了这个 c，下一个状态处理到的字符就是 c 的后一个 字符</span>        <span class="token keyword">return</span> <span class="token function">beforeAttaibuteName</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">endTagOpen</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// &lt;/html></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-zA-Z]/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        currentToken <span class="token operator">=</span> <span class="token punctuation">{</span>            type<span class="token punctuation">:</span> <span class="token string">'endTag'</span><span class="token punctuation">,</span>            tagName<span class="token punctuation">:</span> c        <span class="token punctuation">}</span>        <span class="token keyword">return</span> tagName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* layout 代码*/</span><span class="token comment" spellcheck="true">// 样式 格式化的处理</span><span class="token comment" spellcheck="true">// font-size: bold -> 800</span><span class="token comment" spellcheck="true">// with: 200px -> 逻+-  数字：200</span><span class="token comment" spellcheck="true">// backgroundColor: red;  -> rgb()</span><span class="token comment" spellcheck="true">/** * 功能：将样式加工 * 去除 width/height/...: 200px之中的px留下数值（浏览器处理方法）*/</span><span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>element<span class="token punctuation">.</span>style<span class="token punctuation">)</span> <span class="token punctuation">{</span>        element<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> element<span class="token punctuation">.</span>style<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> element<span class="token punctuation">.</span>computerStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> element<span class="token punctuation">.</span>computerStyle<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            value <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        element<span class="token punctuation">.</span>style<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> element<span class="token punctuation">.</span>style<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">layout</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取 computerStyle</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>element<span class="token punctuation">.</span>computerStyle<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将样式去做处理</span>    <span class="token keyword">let</span> elementStyle <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementStyle<span class="token punctuation">.</span>display <span class="token operator">!==</span> <span class="token string">'flex'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementStyle<span class="token punctuation">[</span><span class="token string">'justify-content'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'center'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 主轴方向剩余空间</span>    <span class="token keyword">let</span> mainSpace <span class="token operator">=</span> elementStyle<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> child <span class="token keyword">of</span> element<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> childStyle <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        mainSpace <span class="token operator">-</span><span class="token operator">=</span> childStyle<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 主轴绘制的起点</span>    <span class="token keyword">let</span> mainBase <span class="token operator">=</span> mainSpace <span class="token operator">/</span> <span class="token number">2</span>        <span class="token comment" spellcheck="true">// 算出主轴全部元素的 x 坐标</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> child <span class="token keyword">of</span> element<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> childStyle <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        childStyle<span class="token punctuation">.</span>x <span class="token operator">=</span> mainBase<span class="token punctuation">;</span>        childStyle<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        mainBase <span class="token operator">+</span><span class="token operator">=</span> childStyle<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 交叉轴的</span>    <span class="token comment" spellcheck="true">// 。。。。</span>    <span class="token comment" spellcheck="true">// 渲染</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> layout<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
